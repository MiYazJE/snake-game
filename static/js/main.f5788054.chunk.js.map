{"version":3,"sources":["components/Cell.js","hooks/useControls.js","components/Board.js","helpers/index.js","hooks/useScore.js","App.js","index.js"],"names":["Cell","memo","hasSnake","fruitClass","hasFruit","cellClass","className","RIGHT","x","y","CONTROLS","a","w","s","d","useControls","moveSnake","useState","start","setStart","direction","setDirection","useEffect","onKeyPress","key","Object","keys","includes","window","addEventListener","removeEventListener","interval","setInterval","console","log","clearInterval","stop","Board","updateScore","saveScore","WIDTH","useMemo","HEIGHT","stylesBoard","gridTemplateRows","gridTemplateColumns","maxWidth","parseInt","snake","setSnake","Math","random","fruit","setFruit","Array","map","board","setBoard","gameOver","setGameOver","isFruit","useCallback","i","j","isSnake","some","prevBoard","row","_","isSafe","id","headSnake","tail","length","newX","newY","eatenFruit","prevPartSnake","updatedSnake","currentPartSnake","copyPartSnake","spawnValidFruit","push","style","cell","useScore","currentScore","setCurrentScore","getMaxScore","JSON","parse","localStorage","getItem","score","maxScore","setItem","stringify","points","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f5788054.chunk.js","sourcesContent":["import React, { memo } from 'react';\r\n\r\nconst Cell = memo(({ hasSnake, hasFruit }) => {\r\n  const snakeClass = hasSnake ? 'snake' : '';\r\n  const fruitClass = hasFruit ? 'fruit' : '';\r\n  const cellClass = `cell ${snakeClass} ${fruitClass}`\r\n  return (\r\n    <div className={cellClass}>\r\n\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Cell;","import { useEffect, useState } from 'react';\r\n\r\nconst RIGHT = { x: 1, y: 0 };\r\nconst LEFT = { x: -1, y: 0 };\r\nconst BOTTOM = { x: 0, y: 1 };\r\nconst UP = { x: 0, y: -1 };\r\n\r\nconst CONTROLS = {\r\n  a: LEFT,\r\n  w: UP,\r\n  s: BOTTOM,\r\n  d: RIGHT,\r\n};\r\n\r\nconst useControls = (moveSnake) => {\r\n  const [start, setStart] = useState(false);\r\n  const [direction, setDirection] = useState(RIGHT);\r\n\r\n  useEffect(() => {\r\n\r\n    const onKeyPress = ({ key }) => {\r\n      if (Object.keys(CONTROLS).includes(key)) {\r\n        if (!start) {\r\n          setStart(true);\r\n        }\r\n        setDirection(CONTROLS[key]);\r\n      }\r\n    }\r\n\r\n    window.addEventListener('keydown', onKeyPress);\r\n\r\n    return () => window.removeEventListener('keydown', onKeyPress);\r\n  }, [moveSnake, start]);\r\n\r\n  useEffect(() => {\r\n    let interval;\r\n\r\n    interval = setInterval(() => {\r\n      if (start) {\r\n        moveSnake({ ...direction });\r\n      }\r\n    }, 100);\r\n\r\n    return () => {\r\n      console.log('clearing interval')\r\n      clearInterval(interval);\r\n    }\r\n  }, [start, direction, moveSnake]);\r\n\r\n  return { stop: () => setStart(false) }\r\n\r\n};\r\n\r\nexport default useControls;","import React, { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport Cell from './Cell';\r\nimport { spawnValidFruit } from '../helpers/';\r\nimport useControls from '../hooks/useControls';\r\n\r\nconst Board = ({ updateScore, saveScore }) => {\r\n\r\n  const WIDTH = useMemo(() => 20, []);\r\n  const HEIGHT = useMemo(() => 20, []);\r\n  const stylesBoard = useMemo(() => ({\r\n    gridTemplateRows: `repeat(${WIDTH}, 1fr)`,\r\n    gridTemplateColumns: `repeat(${HEIGHT}, 1fr)`,\r\n    maxWidth: `${WIDTH * 25}px`,\r\n  }), [WIDTH, HEIGHT]);\r\n\r\n  const [snake, setSnake] = useState([\r\n    {\r\n      x: parseInt(WIDTH / 2),\r\n      y: parseInt(HEIGHT / 2),\r\n    },\r\n    {\r\n      x: parseInt(WIDTH / 2) - 1,\r\n      y: parseInt(HEIGHT / 2),\r\n    },\r\n    {\r\n      x: parseInt(WIDTH / 2) - 2,\r\n      y: parseInt(HEIGHT / 2),\r\n    },\r\n  ]);\r\n  const [fruit, setFruit] = useState({\r\n    x: parseInt(Math.random() * WIDTH),\r\n    y: parseInt(Math.random() * HEIGHT),\r\n  });\r\n  const [board, setBoard] = useState(\r\n    [...new Array(HEIGHT)].map(() => [...new Array(HEIGHT)])\r\n  );\r\n  const [gameOver, setGameOver] = useState(false);\r\n\r\n  const isFruit = useCallback((i, j) => {\r\n    return fruit.x === j && fruit.y === i;\r\n  }, [fruit]);\r\n\r\n  const isSnake = useCallback((i, j) => {\r\n    return snake.some(({ x, y }) => x === j && y === i)\r\n  }, [snake]);\r\n\r\n  useEffect(() => {\r\n    setBoard(prevBoard => {\r\n      return prevBoard.map((row, i) => {\r\n        return [...row.map((_, j) => {\r\n          const hasFruit = isFruit(i, j);\r\n          const hasSnake = isSnake(i, j);\r\n          return {\r\n            hasFruit,\r\n            hasSnake,\r\n            isSafe: !hasFruit && !hasSnake,\r\n            id: (i * j) + j\r\n          }\r\n        })]\r\n      });\r\n    });\r\n  }, [isSnake, isFruit, fruit, snake]);\r\n\r\n  const moveSnake = useCallback(({ x, y }) => {\r\n    const headSnake = snake[0];\r\n    const tail = snake[snake.length - 1];\r\n\r\n    const newX = headSnake.x + x;\r\n    const newY = headSnake.y + y;\r\n    if ((newY < 0 || newY === WIDTH || newX < 0 || newX === HEIGHT)\r\n      || isSnake(newY, newX)) {\r\n      console.log('game over');\r\n      setGameOver(true);\r\n      return;\r\n    }\r\n\r\n    const eatenFruit = isFruit(newY, newX);\r\n    let prevPartSnake = { x: newX, y: newY };\r\n    const updatedSnake = [...snake].map(currentPartSnake => {\r\n      const copyPartSnake = { ...prevPartSnake };\r\n      prevPartSnake = currentPartSnake;\r\n      return copyPartSnake;\r\n    });\r\n\r\n    if (eatenFruit) {\r\n      setFruit(spawnValidFruit(board))\r\n      updateScore(10)\r\n      updatedSnake.push({ ...tail });\r\n    }\r\n    setSnake(updatedSnake);\r\n  }, [HEIGHT, WIDTH, board, isFruit, isSnake, snake, updateScore]);\r\n\r\n  const { stop } = useControls(moveSnake);\r\n\r\n  useEffect(() => {\r\n    if (gameOver) {\r\n      stop();\r\n      saveScore();\r\n    }\r\n  }, [gameOver, stop, saveScore]);\r\n\r\n  return (\r\n    <div className=\"board\" style={stylesBoard}>\r\n      {board.map(row => [...row.map(cell => (\r\n        <Cell\r\n          key={cell?.id}\r\n          {...cell}\r\n        />\r\n      ))])}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;","export const spawnValidFruit = (board) => {\r\n  while (true) {\r\n    const y = parseInt(Math.random() * board.length);\r\n    const x = parseInt(Math.random() * board[0].length);\r\n    if (board[x][y].isSafe) {\r\n      return { y, x };\r\n    }\r\n  }\r\n};","import { useState } from \"react\";\r\n\r\nconst useScore = () => {\r\n  const [currentScore, setCurrentScore] = useState(0);\r\n\r\n  const saveScore = () => {\r\n    const maxScore = getMaxScore() || 0;\r\n    if (currentScore > maxScore) {\r\n      window.localStorage.setItem('score', JSON.stringify({ score: currentScore }));\r\n    }\r\n  };\r\n\r\n  const getMaxScore = () => {\r\n    return JSON.parse(window.localStorage.getItem('score'))?.score || 0;\r\n  };\r\n\r\n  return {\r\n    currentScore,\r\n    saveScore,\r\n    getMaxScore,\r\n    updateScore: (points) => setCurrentScore(currentScore + points),\r\n  };\r\n};\r\n\r\nexport default useScore;","import Board from './components/Board';\nimport './App.css';\nimport useScore from './hooks/useScore';\n\nfunction App() {\n  const { currentScore, updateScore, saveScore, getMaxScore } = useScore();\n\n  return (\n    <div className=\"app\">\n      <h1>Snake Game</h1>\n      <Board\n        updateScore={updateScore}\n        saveScore={saveScore}\n      />\n      <div className=\"info\">\n        <div className=\"score\">\n          <p className=\"currentPoints\"><strong>Current Score:</strong> <span>{currentScore}</span></p>\n          <p className=\"maxPoints\"><strong>Max Score:</strong> <span>{getMaxScore()}</span></p>\n        </div>\n        <div className=\"controls\">\n          <p>Left: a | Right: d | Bottom: s | Up: w</p>\n          <span>Press some key to start...</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}